

/*
 *
 * @author Ishmam Hossain Tonmoy 
    #ID : 13-02-04-059
 */

import java.math.*;

public class Sci_Cal extends javax.swing.JFrame {

    private boolean zerodisp;
    private boolean decdisp;
    private boolean degrad;
    private boolean shft;
    private byte op;
    private double ina,inb,inc,out;
    
    public Sci_Cal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        memory = new javax.swing.JTextField();
        display1 = new javax.swing.JTextField();
        memread = new javax.swing.JButton();
        memclear = new javax.swing.JButton();
        memsave = new javax.swing.JButton();
        display2 = new javax.swing.JTextField();
        percentage = new javax.swing.JButton();
        inverse = new javax.swing.JButton();
        tan = new javax.swing.JButton();
        cos = new javax.swing.JButton();
        sin = new javax.swing.JButton();
        pi = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        six = new javax.swing.JButton();
        five = new javax.swing.JButton();
        four = new javax.swing.JButton();
        one = new javax.swing.JButton();
        two = new javax.swing.JButton();
        three = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        x2 = new javax.swing.JButton();
        root = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        x3 = new javax.swing.JButton();
        multiply = new javax.swing.JButton();
        cuberoot = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        decpoint = new javax.swing.JButton();
        negate = new javax.swing.JButton();
        result = new javax.swing.JButton();
        degree = new javax.swing.JRadioButton();
        radian = new javax.swing.JRadioButton();
        shift = new javax.swing.JToggleButton();
        equation = new javax.swing.JButton();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scientific_Calculator");
        setBackground(new java.awt.Color(127, 8, 8));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(337, 570));
        setResizable(false);

        memory.setBackground(new java.awt.Color(199, 218, 220));
        memory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        memory.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        memory.setText("0");
        memory.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        memory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryActionPerformed(evt);
            }
        });

        display1.setBackground(new java.awt.Color(199, 218, 220));
        display1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        display1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        display1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        display1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                display1ActionPerformed(evt);
            }
        });

        memread.setBackground(new java.awt.Color(153, 153, 153));
        memread.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        memread.setForeground(new java.awt.Color(51, 0, 51));
        memread.setText("MR");
        memread.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        memread.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        memread.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memreadActionPerformed(evt);
            }
        });

        memclear.setBackground(new java.awt.Color(153, 153, 153));
        memclear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        memclear.setForeground(new java.awt.Color(51, 0, 51));
        memclear.setText("MC");
        memclear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        memclear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        memclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memclearActionPerformed(evt);
            }
        });

        memsave.setBackground(new java.awt.Color(153, 153, 153));
        memsave.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        memsave.setForeground(new java.awt.Color(51, 0, 51));
        memsave.setText("MS");
        memsave.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        memsave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        memsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memsaveActionPerformed(evt);
            }
        });

        display2.setBackground(new java.awt.Color(199, 218, 220));
        display2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        display2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        display2.setText("0");
        display2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        display2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                display2ActionPerformed(evt);
            }
        });

        percentage.setBackground(new java.awt.Color(153, 153, 153));
        percentage.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        percentage.setForeground(new java.awt.Color(51, 0, 51));
        percentage.setText("%");
        percentage.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        percentage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        percentage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageActionPerformed(evt);
            }
        });

        inverse.setBackground(new java.awt.Color(153, 153, 153));
        inverse.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        inverse.setForeground(new java.awt.Color(51, 0, 51));
        inverse.setText("1/x");
        inverse.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inverse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inverseActionPerformed(evt);
            }
        });

        tan.setBackground(new java.awt.Color(153, 153, 153));
        tan.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tan.setForeground(new java.awt.Color(51, 0, 51));
        tan.setText("tan");
        tan.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanActionPerformed(evt);
            }
        });

        cos.setBackground(new java.awt.Color(153, 153, 153));
        cos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cos.setForeground(new java.awt.Color(51, 0, 51));
        cos.setText("cos");
        cos.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosActionPerformed(evt);
            }
        });

        sin.setBackground(new java.awt.Color(153, 153, 153));
        sin.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        sin.setForeground(new java.awt.Color(51, 0, 51));
        sin.setText("sin");
        sin.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinActionPerformed(evt);
            }
        });

        pi.setBackground(new java.awt.Color(153, 153, 153));
        pi.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        pi.setForeground(new java.awt.Color(51, 0, 51));
        pi.setText("Ï€");
        pi.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piActionPerformed(evt);
            }
        });

        seven.setBackground(new java.awt.Color(153, 153, 153));
        seven.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        seven.setForeground(new java.awt.Color(51, 0, 51));
        seven.setText("7");
        seven.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        seven.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        eight.setBackground(new java.awt.Color(153, 153, 153));
        eight.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        eight.setForeground(new java.awt.Color(51, 0, 51));
        eight.setText("8");
        eight.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eight.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });

        nine.setBackground(new java.awt.Color(153, 153, 153));
        nine.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        nine.setForeground(new java.awt.Color(51, 0, 51));
        nine.setText("9");
        nine.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        nine.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        six.setBackground(new java.awt.Color(153, 153, 153));
        six.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        six.setForeground(new java.awt.Color(51, 0, 51));
        six.setText("6");
        six.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        six.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        five.setBackground(new java.awt.Color(153, 153, 153));
        five.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        five.setForeground(new java.awt.Color(51, 0, 51));
        five.setText("5");
        five.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        five.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        four.setBackground(new java.awt.Color(153, 153, 153));
        four.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        four.setForeground(new java.awt.Color(51, 0, 51));
        four.setText("4");
        four.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        four.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        one.setBackground(new java.awt.Color(153, 153, 153));
        one.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        one.setForeground(new java.awt.Color(51, 0, 51));
        one.setText("1");
        one.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        one.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        two.setBackground(new java.awt.Color(153, 153, 153));
        two.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        two.setForeground(new java.awt.Color(51, 0, 51));
        two.setText("2");
        two.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        two.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        three.setBackground(new java.awt.Color(153, 153, 153));
        three.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        three.setForeground(new java.awt.Color(51, 0, 51));
        three.setText("3");
        three.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        three.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        plus.setBackground(new java.awt.Color(153, 153, 153));
        plus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        plus.setForeground(new java.awt.Color(51, 0, 51));
        plus.setText("+");
        plus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        plus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });

        x2.setBackground(new java.awt.Color(153, 153, 153));
        x2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        x2.setForeground(new java.awt.Color(51, 0, 51));
        x2.setText("X^2");
        x2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        x2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        x2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                x2ActionPerformed(evt);
            }
        });

        root.setBackground(new java.awt.Color(153, 153, 153));
        root.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        root.setForeground(new java.awt.Color(51, 0, 51));
        root.setText("âˆš");
        root.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        root.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        root.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rootActionPerformed(evt);
            }
        });

        minus.setBackground(new java.awt.Color(153, 153, 153));
        minus.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        minus.setForeground(new java.awt.Color(51, 0, 51));
        minus.setText("-");
        minus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        minus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });

        x3.setBackground(new java.awt.Color(153, 153, 153));
        x3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        x3.setForeground(new java.awt.Color(51, 0, 51));
        x3.setText("X^3");
        x3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        x3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        x3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                x3ActionPerformed(evt);
            }
        });

        multiply.setBackground(new java.awt.Color(153, 153, 153));
        multiply.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        multiply.setForeground(new java.awt.Color(51, 0, 51));
        multiply.setText("*");
        multiply.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        multiply.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyActionPerformed(evt);
            }
        });

        cuberoot.setBackground(new java.awt.Color(153, 153, 153));
        cuberoot.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cuberoot.setForeground(new java.awt.Color(51, 0, 51));
        cuberoot.setText("3âˆšx");
        cuberoot.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cuberoot.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cuberoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuberootActionPerformed(evt);
            }
        });

        divide.setBackground(new java.awt.Color(153, 153, 153));
        divide.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        divide.setForeground(new java.awt.Color(51, 0, 51));
        divide.setText("/");
        divide.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        divide.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(153, 153, 153));
        clear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clear.setForeground(new java.awt.Color(51, 0, 51));
        clear.setText("CE");
        clear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        reset.setBackground(new java.awt.Color(153, 153, 153));
        reset.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        reset.setForeground(new java.awt.Color(51, 0, 51));
        reset.setText("c");
        reset.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        reset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        zero.setBackground(new java.awt.Color(153, 153, 153));
        zero.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        zero.setForeground(new java.awt.Color(51, 0, 51));
        zero.setText("0");
        zero.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        zero.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });

        decpoint.setBackground(new java.awt.Color(153, 153, 153));
        decpoint.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        decpoint.setForeground(new java.awt.Color(51, 0, 51));
        decpoint.setText(".");
        decpoint.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        decpoint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        decpoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decpointActionPerformed(evt);
            }
        });

        negate.setBackground(new java.awt.Color(153, 153, 153));
        negate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        negate.setForeground(new java.awt.Color(51, 0, 51));
        negate.setText("Â±");
        negate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        negate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        negate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negateActionPerformed(evt);
            }
        });

        result.setBackground(new java.awt.Color(153, 153, 153));
        result.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        result.setForeground(new java.awt.Color(51, 0, 51));
        result.setText("=");
        result.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        result.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        result.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultActionPerformed(evt);
            }
        });

        degree.setBackground(new java.awt.Color(199, 208, 220));
        buttonGroup1.add(degree);
        degree.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        degree.setForeground(new java.awt.Color(51, 0, 51));
        degree.setSelected(true);
        degree.setText("Degree");
        degree.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        degree.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        degree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degreeActionPerformed(evt);
            }
        });

        radian.setBackground(new java.awt.Color(199, 208, 220));
        buttonGroup1.add(radian);
        radian.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        radian.setForeground(new java.awt.Color(51, 0, 51));
        radian.setText("Radian");
        radian.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        radian.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        radian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radianActionPerformed(evt);
            }
        });

        shift.setBackground(new java.awt.Color(153, 153, 153));
        shift.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        shift.setForeground(new java.awt.Color(51, 0, 51));
        shift.setText("Sh");
        shift.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        shift.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        shift.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shiftMouseClicked(evt);
            }
        });
        shift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shiftActionPerformed(evt);
            }
        });

        equation.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        equation.setText("Equation solver");
        equation.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        equation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(equation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(display1)
                            .addComponent(display2)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(memread, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(memclear, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(memsave, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(result, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(decpoint, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(negate, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(degree)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radian)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cos, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tan, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memory, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(x3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cuberoot, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(percentage, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(shift, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inverse, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pi, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(root, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(x2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(79, 79, 79))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(display1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(display2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(memread)
                            .addComponent(memclear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(memsave))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(degree)
                            .addComponent(radian))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cos, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tan, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(memory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(shift)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(percentage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inverse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addComponent(pi, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(x2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(root, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(x3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cuberoot, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decpoint, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(negate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(equation, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void degreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degreeActionPerformed
        // TODO add your handling code here:
        degrad=false;
    }//GEN-LAST:event_degreeActionPerformed

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed
        // TODO add your handling code here:
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display1.setText(display1.getText() + "0");
       
    }//GEN-LAST:event_zeroActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed
        // TODO add your handling code here:
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display1.setText(display1.getText() + "1");
        zerodisp=true;
    }//GEN-LAST:event_oneActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
        // TODO add your handling code here:
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display1.setText(display1.getText() + "2");
        zerodisp=true;
    }//GEN-LAST:event_twoActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        // TODO add your handling code here:
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display1.setText(display1.getText() + "3");
        zerodisp=true;
    }//GEN-LAST:event_threeActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        // TODO add your handling code here:
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display1.setText(display1.getText() + "4");
        zerodisp=true;
    }//GEN-LAST:event_fourActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        // TODO add your handling code here:
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display1.setText(display1.getText() + "5");
        zerodisp=true;
    }//GEN-LAST:event_fiveActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        // TODO add your handling code here:
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display1.setText(display1.getText() + "6");
        zerodisp=true;
    }//GEN-LAST:event_sixActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        // TODO add your handling code here:
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display1.setText(display1.getText() + "7");
        zerodisp=true;
    }//GEN-LAST:event_sevenActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed
        // TODO add your handling code here:
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display1.setText(display1.getText() + "8");
        zerodisp=true;
    }//GEN-LAST:event_eightActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        // TODO add your handling code here:
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display1.setText(display1.getText() + "9");
        zerodisp=true;
    }//GEN-LAST:event_nineActionPerformed

    private void decpointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decpointActionPerformed
        // TODO add your handling code here:
        if(!decdisp)
        {
            display1.setText(display1.getText() + ".");
        }
        decdisp=true;
    }//GEN-LAST:event_decpointActionPerformed

    private void negateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negateActionPerformed
        // TODO add your handling code here:
        inb=Double.parseDouble(String.valueOf(display1.getText()));
        out= inb * (-1);
        
        if(out> -100000000 && out < 100000000)
        {
            display1.setText(String.valueOf(out));
            
        }
        else
        {
            display1.setText("Error !! ");
        }
        
        zerodisp=true;
        out =0;
            
    }//GEN-LAST:event_negateActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        display1.setText("0");
        display2.setText(null);
        zerodisp=false;
        decdisp=false;
        
        ina = 0;
        inb = 0;
        out = 0;
    }//GEN-LAST:event_resetActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
         display1.setText("0");
       
        zerodisp=false;
        decdisp=false;
    }//GEN-LAST:event_clearActionPerformed

    private void memreadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memreadActionPerformed
        // TODO add your handling code here:
        display1.setText(String.valueOf(memory.getText()));
        
    }//GEN-LAST:event_memreadActionPerformed

    private void memclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memclearActionPerformed
        // TODO add your handling code here:
       
        memory.setText("0");
    }//GEN-LAST:event_memclearActionPerformed

    private void memsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memsaveActionPerformed
        // TODO add your handling code here:
        memory.setText(String.valueOf(display1.getText()));
    }//GEN-LAST:event_memsaveActionPerformed

    private void inverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inverseActionPerformed
        // TODO add your handling code here:
        inb=Double.parseDouble(String.valueOf(display1.getText()));
        out= 1 / inb;
         if(out> -100000000 && out < 100000000)
        {
            display1.setText(String.valueOf(out));
            
        }
        else
        {
            display1.setText("Error !! ");
        }
         display2.setText("1/" + String.valueOf(inb));
        
        
        out =0;
        op=0;
    }//GEN-LAST:event_inverseActionPerformed

    private void piActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piActionPerformed
        // TODO add your handling code here:
        display1.setText(String.valueOf(Math.PI));
    }//GEN-LAST:event_piActionPerformed

    private void x2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_x2ActionPerformed
        // TODO add your handling code here:
        inb=Double.parseDouble(String.valueOf(display1.getText()));
        out=inb*inb;
        
         if(out> -100000000 && out < 100000000)
        {
            display1.setText(String.valueOf(out));
            
        }
        else
        {
            display1.setText("Error !! ");
        }
         display2.setText(String.valueOf(inb) + "^2");
         out=0;
          op=0;
         
    }//GEN-LAST:event_x2ActionPerformed

    private void rootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootActionPerformed
        // TODO add your handling code here:
        
        inb=Double.parseDouble(String.valueOf(display1.getText()));
        out=Math.sqrt(inb);
        
   
        display1.setText(String.valueOf(out));
        display2.setText("âˆš" + String.valueOf(inb));
        out=0;
    }//GEN-LAST:event_rootActionPerformed

    private void x3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_x3ActionPerformed
        // TODO add your handling code here:
        inb=Double.parseDouble(String.valueOf(display1.getText()));
        out=inb*inb*inb;
        
         if(out> -100000000 && out < 100000000)
        {
            display1.setText(String.valueOf(out));
            
        }
        else
        {
            display1.setText("Error !! ");
        }
         display2.setText(String.valueOf(inb) + "^3");
         out=0;
          op=0;
    }//GEN-LAST:event_x3ActionPerformed

    private void cuberootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuberootActionPerformed
        // TODO add your handling code here:
        inb=Double.parseDouble(String.valueOf(display1.getText()));
        out=Math.cbrt(inb);
        
   
        display1.setText(String.valueOf(out));
        display2.setText("3âˆš" + String.valueOf(inb));
        out=0;
         op=0;
    }//GEN-LAST:event_cuberootActionPerformed

    private void shiftMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shiftMouseClicked
        // TODO add your handling code here:
         if(!shft)
        { 
            shft=true;
        }
        else
            shft=false;
        
    }//GEN-LAST:event_shiftMouseClicked

    private void sinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinActionPerformed
        // TODO add your handling code here:
        inb=Double.parseDouble(String.valueOf(display1.getText()));
        if(!shft)
        {
        
            
            if(!degrad)
            {
                display2.setText("sin(" +String.valueOf(inb) + ")");
                inb=inb* 0.174532925;
            
            }
            out=Math.sin(inb);
        }
        else
        {
            display2.setText("sinh(" +String.valueOf(inb) + ")");
            out=Math.sinh(inb);
            
        }
        display1.setText(String.valueOf(out));
        
        out=0;
         op=0;
    }//GEN-LAST:event_sinActionPerformed

    private void cosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosActionPerformed
        // TODO add your handling code here:
        
        inb=Double.parseDouble(String.valueOf(display1.getText()));
        if(!shft)
        {
        
            
            if(!degrad)
            {
                display2.setText("cos(" +String.valueOf(inb) + ")");
                inb=inb* 0.174532925;
            
            }
            out=Math.cos(inb);
        }
        else
        {
            display2.setText("sinh(" +String.valueOf(inb) + ")");
            out=Math.cosh(inb);
            
        }
        display1.setText(String.valueOf(out));
        
        out=0;
         op=0;
    }//GEN-LAST:event_cosActionPerformed

    private void tanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanActionPerformed
        // TODO add your handling code here:
        
        inb=Double.parseDouble(String.valueOf(display1.getText()));
        if(!shft)
        {
        
            
            if(!degrad)
            {
                display2.setText("tan(" +String.valueOf(inb) + ")");
                inb=inb* 0.174532925;
            
            }
            out=Math.tan(inb);
        }
        else
        {
            display2.setText("sinh(" +String.valueOf(inb) + ")");
            out=Math.tanh(inb);
            
        }
        display1.setText(String.valueOf(out));
        
        out=0;
         op=0;
    }//GEN-LAST:event_tanActionPerformed

    private void radianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radianActionPerformed
        degrad=true;
    }//GEN-LAST:event_radianActionPerformed

    private void shiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shiftActionPerformed
        //Unnecessary !!!!
       
    }//GEN-LAST:event_shiftActionPerformed

    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        // TODO add your handling code here:
        if(op==0)
        {
            ina=Double.parseDouble(String.valueOf(display1.getText()));
        }
        else
        {
             inb=Double.parseDouble(String.valueOf(display1.getText()));
             
        }
        if(op==1)
        {ina=ina+inb;}
        if(op==2)
            {ina=ina-inb;}
        if(op==3)
           { ina=ina*inb;}
        if(op==4)
            {ina=ina/inb;}
        if(op==5)
            {ina= ina*inb/100;}
        
        display1.setText("0");
        display2.setText(String.valueOf(ina) + " + ");
        op=1;
        zerodisp=false;
        decdisp=false;
       
    }//GEN-LAST:event_plusActionPerformed

    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed
        // TODO add your handling code here:
         if(op==0)
        {
            ina=Double.parseDouble(String.valueOf(display1.getText()));
        }
        else
        {
             inb=Double.parseDouble(String.valueOf(display1.getText()));
             
        }
        if(op==1)
        {ina=ina+inb;}
        if(op==2)
            {ina=ina-inb;}
        if(op==3)
           { ina=ina*inb;}
        if(op==4)
            {ina=ina/inb;}
        if(op==5)
            {ina= ina*inb/100;}
        
        display1.setText("0");
        display2.setText(String.valueOf(ina) + " - ");
        op=2;
        zerodisp=false;
        decdisp=false;
    }//GEN-LAST:event_minusActionPerformed

    private void multiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplyActionPerformed
        // TODO add your handling code here:
         if(op==0)
        {
            ina=Double.parseDouble(String.valueOf(display1.getText()));
        }
        else
        {
             inb=Double.parseDouble(String.valueOf(display1.getText()));
             
        }
        if(op==1)
        {ina=ina+inb;}
        if(op==2)
            {ina=ina-inb;}
        if(op==3)
           { ina=ina*inb;}
        if(op==4)
            {ina=ina/inb;}
        if(op==5)
            {ina= ina*inb/100;}
        
        display1.setText("0");
        display2.setText(String.valueOf(ina) + " * ");
        op=3;
        zerodisp=false;
        decdisp=false;
    }//GEN-LAST:event_multiplyActionPerformed

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed
        // TODO add your handling code here:
         if(op==0)
        {
            ina=Double.parseDouble(String.valueOf(display1.getText()));
        }
        else
        {
             inb=Double.parseDouble(String.valueOf(display1.getText()));
             
        }
        if(op==1)
        {ina=ina+inb;}
        if(op==2)
            {ina=ina-inb;}
        if(op==3)
           { ina=ina*inb;}
        if(op==4)
            {ina=ina/inb;}
        if(op==5)
            {ina= ina*inb/100;}
        
        display1.setText("0");
        display2.setText(String.valueOf(ina) + " / ");
        op=4;
        zerodisp=false;
        decdisp=false;
    }//GEN-LAST:event_divideActionPerformed

    private void percentageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageActionPerformed
        // TODO add your handling code here:
        ina=Double.parseDouble(String.valueOf(display1.getText()));
        display1.setText("0");
        display2.setText(String.valueOf(ina) + "%(");
       
        decdisp=false;
        zerodisp=false;
        op=5;
        
    }//GEN-LAST:event_percentageActionPerformed

    private void resultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultActionPerformed
        // TODO add your handling code here:
        inb=Double.parseDouble(String.valueOf(display1.getText()));
        
        if(op==0)
           {
            out=inb ;
            display2.setText(String.valueOf(inb));
           }
       if(op==1)
           {
            out=ina +inb ;
            display2.setText(display2.getText()+ String.valueOf(inb));
           }
       if(op==2)
           {
            out=ina - inb ;
            display2.setText(display2.getText()+ String.valueOf(inb));
           }
       if(op==3)
           {
            out=ina * inb ;
            display2.setText(display2.getText()+ String.valueOf(inb));
           }
       if(op==4)
           {
            out=ina / inb ;
            display2.setText(display2.getText()+ String.valueOf(inb));
           }
       if(op==5)
           {
            out=ina * inb/ 100 ;
            display2.setText(display2.getText()+ String.valueOf(inb) + ")");
           }
       
          if(out> -100000000 && out < 100000000)
        {
            display1.setText(String.valueOf(out));
            
        }
        else
        {
            display1.setText("Error !! ");
        }
          
        ina=0;
        inb=0;
        out=0;
        op=0;
        decdisp=false;
        zerodisp=false;
    }//GEN-LAST:event_resultActionPerformed

    private void display1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_display1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_display1ActionPerformed

    private void display2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_display2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_display2ActionPerformed

    private void memoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_memoryActionPerformed

    private void equationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equationActionPerformed
        // TODO add your handling code here:
       /* int A,B,C;
        double R1,R2;
        if(!zerodisp && !decdisp)
        { 
            display1.setText(null);
        }
        display2.setText("Enter value of A ");
        A=Integer.parseInt(String.valueOf(display1.getText()));
        display2.setText("Enter value of B ");
        B=Integer.parseInt(String.valueOf(display1.getText()));
        display2.setText("Enter value of C ");
        C=Integer.parseInt(String.valueOf(display1.getText()));
        
        double D;
        
        D=B*B-(4*A*C);
        R1=(-B+Math.sqrt(D))/(2*A);
        R2=(-B-Math.sqrt(D))/(2*A);
        
        display1.setText("Roots are: "+R1 +R2);
       
        
        zerodisp=true;*/
        
        
    }//GEN-LAST:event_equationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sci_Cal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sci_Cal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sci_Cal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sci_Cal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sci_Cal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clear;
    private javax.swing.JButton cos;
    private javax.swing.JButton cuberoot;
    private javax.swing.JButton decpoint;
    private javax.swing.JRadioButton degree;
    private javax.swing.JTextField display1;
    private javax.swing.JTextField display2;
    private javax.swing.JButton divide;
    private javax.swing.JButton eight;
    private javax.swing.JButton equation;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton inverse;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JButton memclear;
    private javax.swing.JTextField memory;
    private javax.swing.JButton memread;
    private javax.swing.JButton memsave;
    private javax.swing.JButton minus;
    private javax.swing.JButton multiply;
    private javax.swing.JButton negate;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton percentage;
    private javax.swing.JButton pi;
    private javax.swing.JButton plus;
    private javax.swing.JRadioButton radian;
    private javax.swing.JButton reset;
    private javax.swing.JButton result;
    private javax.swing.JButton root;
    private javax.swing.JButton seven;
    private javax.swing.JToggleButton shift;
    private javax.swing.JButton sin;
    private javax.swing.JButton six;
    private javax.swing.JButton tan;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JButton x2;
    private javax.swing.JButton x3;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables
}

